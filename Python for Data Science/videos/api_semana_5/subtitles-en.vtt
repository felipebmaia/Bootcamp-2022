WEBVTT

1
00:00:07.360 --> 00:00:13.040
In this video we will discuss Application
Program Interfaces API for short.

2
00:00:13.040 --> 00:00:17.280
Specifically, we will discuss:
What is an API API Libraries

3
00:00:17.840 --> 00:00:21.280
REST API, including:
Request and Response

4
00:00:21.280 --> 00:00:25.680
An Example with PyCoinGecko
An API lets two pieces

5
00:00:25.680 --> 00:00:29.600
of software talk to each other
For example you have your program,

6
00:00:29.600 --> 00:00:32.880
you have some data, you have
other software components.

7
00:00:33.440 --> 00:00:38.800
You use the api to communicate with
the api via inputs and outputs.

8
00:00:38.800 --> 00:00:44.800
Just like a function, you don’t have to know how
the API works, but just its inputs and outputs.

9
00:00:45.360 --> 00:00:51.120
Pandas is actually a set of software components,
much of which are not even written in Python.

10
00:00:51.120 --> 00:00:54.560
You have some data.
You have a set of software components.

11
00:00:54.560 --> 00:01:00.160
We use the pandas api to process the data by
communicating with the other Software Components.

12
00:01:00.960 --> 00:01:04.400
Let’s clean up the diagram.
When you create a dictionary,

13
00:01:04.400 --> 00:01:10.480
and then create a pandas object with the Dataframe
constructor, in API lingo, this is an “instance.”

14
00:01:11.040 --> 00:01:15.040
The data in the dictionary is
passed along to the pandas API.

15
00:01:15.040 --> 00:01:18.640
You then use the dataframe
to communicate with the API.

16
00:01:18.640 --> 00:01:22.480
When you call the method head,
the dataframe communicates with the API

17
00:01:22.480 --> 00:01:26.880
displaying the first few rows of the dataframe.
When you call the method mean

18
00:01:26.880 --> 00:01:30.240
the API will calculate the
mean and return the values.

19
00:01:32.320 --> 00:01:37.520
REST APIs are another popular type of API;
they allow you to communicate through the

20
00:01:37.520 --> 00:01:42.400
internet allowing you to take advantage of
resources like storage, access more data,

21
00:01:42.400 --> 00:01:48.560
artificial intelligent algorithms, and much
more. The RE stands for Representational,

22
00:01:48.560 --> 00:01:51.200
the S stands for State,
the T stand for Transfer.

23
00:01:51.920 --> 00:01:57.520
In rest API’s your program is called the client.
The API communicates with a web

24
00:01:57.520 --> 00:02:02.480
service you call through the internet.
There is a set of rules regarding Communication,

25
00:02:02.480 --> 00:02:08.240
Input or Request, and Output or Response.
Here are some common terms.

26
00:02:08.240 --> 00:02:14.640
You or your code can be thought of as a client.
The web service is referred to as a resource.

27
00:02:14.640 --> 00:02:20.800
The client finds the service via an endpoint.
We will review this more in the next section.

28
00:02:20.800 --> 00:02:25.280
The client sends requests to the
resource and the response to the client.

29
00:02:26.080 --> 00:02:30.480
HTTP methods are a way of
transmitting data over the internet

30
00:02:30.480 --> 00:02:34.880
We tell the Rest API’s what to do
by sending a request. The request

31
00:02:34.880 --> 00:02:42.240
is usually communicated via an HTTP message.
The HTTP message usually contains a JSON file.

32
00:02:42.240 --> 00:02:46.640
This contains instructions for what operation
we would like the service to perform.

33
00:02:46.640 --> 00:02:50.720
This operation is transmitted to
the webservice via the internet.

34
00:02:50.720 --> 00:02:54.960
The service performs the operation.
In the similar manner, the webservice

35
00:02:54.960 --> 00:03:00.400
returns a response via an HTTP message,
where the information is usually returned

36
00:03:00.400 --> 00:03:04.960
via a JSON file. This information
is transmitted back to the client.

37
00:03:05.680 --> 00:03:10.960
Crypto Currency data is excellent to be used in
an API because it is being constantly updated

38
00:03:10.960 --> 00:03:16.240
and it is vital to CryptoCurrency Trading
We will use the Py-Coin-Gecko Python

39
00:03:17.120 --> 00:03:22.560
Client/Wrapper for the Coin Gecko API,
updated every minute by Coin-Gecko

40
00:03:22.560 --> 00:03:28.720
We use the Wrapper/Client because it is easy to
use so you can focus on the task of collecting

41
00:03:28.720 --> 00:03:34.560
data, we will also introduce pandas time series
functions for dealing with time series data

42
00:03:35.120 --> 00:03:40.080
Using Py-Coin-Gecko to collect data is
quite simple All we need is to install

43
00:03:40.080 --> 00:03:46.400
and import the library Create a client object
And finally use a function to request our data.

44
00:03:46.960 --> 00:03:51.760
In this function we are getting data on
bitcoin, in U.S. Dollars, for the past

45
00:03:51.760 --> 00:03:59.280
30 days. In this case our response is a JSON
expressed as a python dictionary of nested lists

46
00:03:59.280 --> 00:04:05.360
including price, market cap, and total volumes
which contain the unix timestamp and the price

47
00:04:05.360 --> 00:04:11.840
at that time. We are only interested in price so
that is what we will select using the key price

48
00:04:12.400 --> 00:04:16.800
To make things simple, we can convert
our nested list to a DataFrame,

49
00:04:16.800 --> 00:04:22.400
with the columns time stamp and price
its difficult to understand the column time stamp

50
00:04:22.400 --> 00:04:27.360
we Will convert it to a more readable
format using the pandas Function to_datetime

51
00:04:28.880 --> 00:04:36.160
Using the to datetime function, we create
readable time data, the input is the time stamp

52
00:04:36.160 --> 00:04:41.840
column unit of time is set to milliseconds
We append the output to the new column date

53
00:04:43.200 --> 00:04:47.920
We. Would like to create a candle stick plot
To get the data for the daily candlesticks

54
00:04:47.920 --> 00:04:51.360
we will group by the date
to find the minimum, maximum,

55
00:04:51.360 --> 00:04:56.480
first, and last price of each day
Finally we will use plotly to create

56
00:04:56.480 --> 00:04:58.480
the candlestick chart
and plot it

57
00:04:59.120 --> 00:05:03.680
Now we can view the candlestick chart
by opening the html file and clicking

58
00:05:03.680 --> 00:05:09.840
trust HTML in the top left of the tab
It should look something like this